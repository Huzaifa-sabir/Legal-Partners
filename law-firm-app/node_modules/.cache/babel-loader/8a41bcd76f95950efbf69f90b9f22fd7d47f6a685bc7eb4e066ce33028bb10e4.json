{"ast":null,"code":"import { collection, doc, addDoc, getDocs, getDoc, updateDoc, deleteDoc, query, orderBy, where, limit } from 'firebase/firestore';\nimport { db } from './firebase';\nimport toast from 'react-hot-toast';\nclass PoliciesService {\n  constructor() {\n    this.policiesCollection = collection(db, 'policies');\n  }\n\n  // Create new policy (admin only)\n  async createPolicy(policyData) {\n    try {\n      const newPolicy = {\n        ...policyData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        active: true\n      };\n      const docRef = await addDoc(this.policiesCollection, newPolicy);\n      toast.success('Policy created successfully');\n      return {\n        id: docRef.id,\n        ...newPolicy\n      };\n    } catch (error) {\n      console.error('Error creating policy:', error);\n      toast.error('Failed to create policy');\n      throw error;\n    }\n  }\n\n  // Get all policies\n  async getAllPolicies() {\n    try {\n      const q = query(this.policiesCollection, orderBy('createdAt', 'desc'));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error fetching policies:', error);\n      toast.error('Failed to fetch policies');\n      throw error;\n    }\n  }\n\n  // Get active policies only\n  async getActivePolicies() {\n    try {\n      const q = query(this.policiesCollection, where('active', '==', true), orderBy('createdAt', 'desc'));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error fetching active policies:', error);\n      throw error;\n    }\n  }\n\n  // Get policy by ID\n  async getPolicyById(policyId) {\n    try {\n      const policyDoc = await getDoc(doc(db, 'policies', policyId));\n      if (policyDoc.exists()) {\n        return {\n          id: policyDoc.id,\n          ...policyDoc.data()\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching policy:', error);\n      throw error;\n    }\n  }\n\n  // Update policy (admin only)\n  async updatePolicy(policyId, updateData) {\n    try {\n      const updatedData = {\n        ...updateData,\n        updatedAt: new Date().toISOString()\n      };\n      await updateDoc(doc(db, 'policies', policyId), updatedData);\n      toast.success('Policy updated successfully');\n      return true;\n    } catch (error) {\n      console.error('Error updating policy:', error);\n      toast.error('Failed to update policy');\n      throw error;\n    }\n  }\n\n  // Delete policy (admin only)\n  async deletePolicy(policyId) {\n    try {\n      await deleteDoc(doc(db, 'policies', policyId));\n      toast.success('Policy deleted successfully');\n      return true;\n    } catch (error) {\n      console.error('Error deleting policy:', error);\n      toast.error('Failed to delete policy');\n      throw error;\n    }\n  }\n\n  // Toggle policy status (activate/deactivate)\n  async togglePolicyStatus(policyId, active) {\n    try {\n      await updateDoc(doc(db, 'policies', policyId), {\n        active: active,\n        updatedAt: new Date().toISOString()\n      });\n      toast.success(`Policy ${active ? 'activated' : 'deactivated'} successfully`);\n      return true;\n    } catch (error) {\n      console.error('Error toggling policy status:', error);\n      toast.error('Failed to update policy status');\n      throw error;\n    }\n  }\n\n  // Search policies\n  async searchPolicies(searchTerm) {\n    try {\n      const allPolicies = await this.getAllPolicies();\n      return allPolicies.filter(policy => {\n        var _policy$title, _policy$description, _policy$category;\n        return ((_policy$title = policy.title) === null || _policy$title === void 0 ? void 0 : _policy$title.toLowerCase().includes(searchTerm.toLowerCase())) || ((_policy$description = policy.description) === null || _policy$description === void 0 ? void 0 : _policy$description.toLowerCase().includes(searchTerm.toLowerCase())) || ((_policy$category = policy.category) === null || _policy$category === void 0 ? void 0 : _policy$category.toLowerCase().includes(searchTerm.toLowerCase()));\n      });\n    } catch (error) {\n      console.error('Error searching policies:', error);\n      throw error;\n    }\n  }\n\n  // Get policies by category\n  async getPoliciesByCategory(category) {\n    try {\n      const q = query(this.policiesCollection, where('category', '==', category), where('active', '==', true), orderBy('createdAt', 'desc'));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error fetching policies by category:', error);\n      throw error;\n    }\n  }\n\n  // Get recent policies\n  async getRecentPolicies(limitCount = 5) {\n    try {\n      const q = query(this.policiesCollection, where('active', '==', true), orderBy('createdAt', 'desc'), limit(limitCount));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error fetching recent policies:', error);\n      throw error;\n    }\n  }\n\n  // Get policy statistics\n  async getPolicyStats() {\n    try {\n      const policies = await this.getAllPolicies();\n      const stats = {\n        total: policies.length,\n        active: policies.filter(policy => policy.active).length,\n        inactive: policies.filter(policy => !policy.active).length,\n        categories: [...new Set(policies.map(policy => policy.category))].length\n      };\n      return stats;\n    } catch (error) {\n      console.error('Error fetching policy stats:', error);\n      throw error;\n    }\n  }\n\n  // Get policies grouped by category\n  async getPoliciesGroupedByCategory() {\n    try {\n      const policies = await this.getActivePolicies();\n      const grouped = policies.reduce((acc, policy) => {\n        const category = policy.category || 'Uncategorized';\n        if (!acc[category]) {\n          acc[category] = [];\n        }\n        acc[category].push(policy);\n        return acc;\n      }, {});\n      return grouped;\n    } catch (error) {\n      console.error('Error grouping policies by category:', error);\n      throw error;\n    }\n  }\n}\nexport default new PoliciesService();","map":{"version":3,"names":["collection","doc","addDoc","getDocs","getDoc","updateDoc","deleteDoc","query","orderBy","where","limit","db","toast","PoliciesService","constructor","policiesCollection","createPolicy","policyData","newPolicy","createdAt","Date","toISOString","updatedAt","active","docRef","success","id","error","console","getAllPolicies","q","snapshot","docs","map","data","getActivePolicies","getPolicyById","policyId","policyDoc","exists","updatePolicy","updateData","updatedData","deletePolicy","togglePolicyStatus","searchPolicies","searchTerm","allPolicies","filter","policy","_policy$title","_policy$description","_policy$category","title","toLowerCase","includes","description","category","getPoliciesByCategory","getRecentPolicies","limitCount","getPolicyStats","policies","stats","total","length","inactive","categories","Set","getPoliciesGroupedByCategory","grouped","reduce","acc","push"],"sources":["D:/Law/law-firm-app/src/services/policiesService.js"],"sourcesContent":["import { \r\n  collection, \r\n  doc, \r\n  addDoc, \r\n  getDocs, \r\n  getDoc, \r\n  updateDoc, \r\n  deleteDoc,\r\n  query,\r\n  orderBy,\r\n  where,\r\n  limit \r\n} from 'firebase/firestore';\r\nimport { db } from './firebase';\r\nimport toast from 'react-hot-toast';\r\n\r\nclass PoliciesService {\r\n  constructor() {\r\n    this.policiesCollection = collection(db, 'policies');\r\n  }\r\n\r\n  // Create new policy (admin only)\r\n  async createPolicy(policyData) {\r\n    try {\r\n      const newPolicy = {\r\n        ...policyData,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n        active: true\r\n      };\r\n\r\n      const docRef = await addDoc(this.policiesCollection, newPolicy);\r\n      toast.success('Policy created successfully');\r\n      \r\n      return {\r\n        id: docRef.id,\r\n        ...newPolicy\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating policy:', error);\r\n      toast.error('Failed to create policy');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all policies\r\n  async getAllPolicies() {\r\n    try {\r\n      const q = query(this.policiesCollection, orderBy('createdAt', 'desc'));\r\n      const snapshot = await getDocs(q);\r\n      \r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching policies:', error);\r\n      toast.error('Failed to fetch policies');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get active policies only\r\n  async getActivePolicies() {\r\n    try {\r\n      const q = query(\r\n        this.policiesCollection, \r\n        where('active', '==', true),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      const snapshot = await getDocs(q);\r\n      \r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching active policies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get policy by ID\r\n  async getPolicyById(policyId) {\r\n    try {\r\n      const policyDoc = await getDoc(doc(db, 'policies', policyId));\r\n      \r\n      if (policyDoc.exists()) {\r\n        return {\r\n          id: policyDoc.id,\r\n          ...policyDoc.data()\r\n        };\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching policy:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update policy (admin only)\r\n  async updatePolicy(policyId, updateData) {\r\n    try {\r\n      const updatedData = {\r\n        ...updateData,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      await updateDoc(doc(db, 'policies', policyId), updatedData);\r\n      toast.success('Policy updated successfully');\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating policy:', error);\r\n      toast.error('Failed to update policy');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete policy (admin only)\r\n  async deletePolicy(policyId) {\r\n    try {\r\n      await deleteDoc(doc(db, 'policies', policyId));\r\n      toast.success('Policy deleted successfully');\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting policy:', error);\r\n      toast.error('Failed to delete policy');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Toggle policy status (activate/deactivate)\r\n  async togglePolicyStatus(policyId, active) {\r\n    try {\r\n      await updateDoc(doc(db, 'policies', policyId), {\r\n        active: active,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      \r\n      toast.success(`Policy ${active ? 'activated' : 'deactivated'} successfully`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error toggling policy status:', error);\r\n      toast.error('Failed to update policy status');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search policies\r\n  async searchPolicies(searchTerm) {\r\n    try {\r\n      const allPolicies = await this.getAllPolicies();\r\n      \r\n      return allPolicies.filter(policy => \r\n        policy.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        policy.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        policy.category?.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    } catch (error) {\r\n      console.error('Error searching policies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get policies by category\r\n  async getPoliciesByCategory(category) {\r\n    try {\r\n      const q = query(\r\n        this.policiesCollection,\r\n        where('category', '==', category),\r\n        where('active', '==', true),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      const snapshot = await getDocs(q);\r\n      \r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching policies by category:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get recent policies\r\n  async getRecentPolicies(limitCount = 5) {\r\n    try {\r\n      const q = query(\r\n        this.policiesCollection,\r\n        where('active', '==', true),\r\n        orderBy('createdAt', 'desc'),\r\n        limit(limitCount)\r\n      );\r\n      const snapshot = await getDocs(q);\r\n      \r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching recent policies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get policy statistics\r\n  async getPolicyStats() {\r\n    try {\r\n      const policies = await this.getAllPolicies();\r\n      \r\n      const stats = {\r\n        total: policies.length,\r\n        active: policies.filter(policy => policy.active).length,\r\n        inactive: policies.filter(policy => !policy.active).length,\r\n        categories: [...new Set(policies.map(policy => policy.category))].length\r\n      };\r\n      \r\n      return stats;\r\n    } catch (error) {\r\n      console.error('Error fetching policy stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get policies grouped by category\r\n  async getPoliciesGroupedByCategory() {\r\n    try {\r\n      const policies = await this.getActivePolicies();\r\n      \r\n      const grouped = policies.reduce((acc, policy) => {\r\n        const category = policy.category || 'Uncategorized';\r\n        if (!acc[category]) {\r\n          acc[category] = [];\r\n        }\r\n        acc[category].push(policy);\r\n        return acc;\r\n      }, {});\r\n      \r\n      return grouped;\r\n    } catch (error) {\r\n      console.error('Error grouping policies by category:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new PoliciesService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
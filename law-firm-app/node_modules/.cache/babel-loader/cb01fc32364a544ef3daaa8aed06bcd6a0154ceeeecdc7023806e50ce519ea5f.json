{"ast":null,"code":"var _jsxFileName = \"D:\\\\Law\\\\law-firm-app\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile } from 'firebase/auth';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { auth, db } from '../services/firebase';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Register new user\n  const signup = async (email, password, displayName, role = 'user') => {\n    try {\n      const {\n        user\n      } = await createUserWithEmailAndPassword(auth, email, password);\n\n      // Update profile with display name\n      await updateProfile(user, {\n        displayName: displayName\n      });\n\n      // Save user data to Firestore\n      await setDoc(doc(db, 'users', user.uid), {\n        uid: user.uid,\n        email: user.email,\n        displayName: displayName,\n        role: role,\n        createdAt: new Date().toISOString(),\n        active: true\n      });\n      setUserRole(role);\n      toast.success('Account created successfully!');\n      return user;\n    } catch (error) {\n      console.error('Signup error:', error);\n      toast.error(error.message || 'Failed to create account');\n      throw error;\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      const {\n        user\n      } = await signInWithEmailAndPassword(auth, email, password);\n\n      // Get user role from Firestore\n      const userDoc = await getDoc(doc(db, 'users', user.uid));\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        setUserRole(userData.role);\n        if (!userData.active) {\n          await signOut(auth);\n          toast.error('Your account has been disabled. Please contact support.');\n          throw new Error('Account disabled');\n        }\n      }\n      toast.success('Welcome back!');\n      return user;\n    } catch (error) {\n      console.error('Login error:', error);\n      toast.error(error.message || 'Failed to login');\n      throw error;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      setCurrentUser(null);\n      setUserRole(null);\n      toast.success('Logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n      toast.error('Failed to logout');\n    }\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return userRole === 'admin';\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!currentUser;\n  };\n\n  // Update user profile\n  const updateUserProfile = async data => {\n    try {\n      if (currentUser) {\n        await updateProfile(currentUser, data);\n\n        // Update Firestore document\n        await setDoc(doc(db, 'users', currentUser.uid), {\n          ...data,\n          updatedAt: new Date().toISOString()\n        }, {\n          merge: true\n        });\n        toast.success('Profile updated successfully');\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      toast.error('Failed to update profile');\n      throw error;\n    }\n  };\n\n  // Get user role from Firestore\n  const getUserRole = async uid => {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', uid));\n      if (userDoc.exists()) {\n        return userDoc.data().role;\n      }\n      return 'user'; // Default role\n    } catch (error) {\n      console.error('Get user role error:', error);\n      return 'user';\n    }\n  };\n\n  // Listen for authentication state changes\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      if (user) {\n        setCurrentUser(user);\n        // Get user role from Firestore\n        const role = await getUserRole(user.uid);\n        setUserRole(role);\n      } else {\n        setCurrentUser(null);\n        setUserRole(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    userRole,\n    signup,\n    login,\n    logout,\n    isAdmin,\n    isAuthenticated,\n    updateUserProfile,\n    getUserRole\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"oJcdYGl4IB/GVvCCnTftfffWqnQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","doc","setDoc","getDoc","auth","db","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","userRole","setUserRole","loading","setLoading","signup","email","password","displayName","role","user","uid","createdAt","Date","toISOString","active","success","error","console","message","login","userDoc","exists","userData","data","logout","isAdmin","isAuthenticated","updateUserProfile","updatedAt","merge","getUserRole","unsubscribe","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Law/law-firm-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged,\r\n  updateProfile \r\n} from 'firebase/auth';\r\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\r\nimport { auth, db } from '../services/firebase';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Register new user\r\n  const signup = async (email, password, displayName, role = 'user') => {\r\n    try {\r\n      const { user } = await createUserWithEmailAndPassword(auth, email, password);\r\n      \r\n      // Update profile with display name\r\n      await updateProfile(user, {\r\n        displayName: displayName\r\n      });\r\n\r\n      // Save user data to Firestore\r\n      await setDoc(doc(db, 'users', user.uid), {\r\n        uid: user.uid,\r\n        email: user.email,\r\n        displayName: displayName,\r\n        role: role,\r\n        createdAt: new Date().toISOString(),\r\n        active: true\r\n      });\r\n\r\n      setUserRole(role);\r\n      toast.success('Account created successfully!');\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Signup error:', error);\r\n      toast.error(error.message || 'Failed to create account');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Login user\r\n  const login = async (email, password) => {\r\n    try {\r\n      const { user } = await signInWithEmailAndPassword(auth, email, password);\r\n      \r\n      // Get user role from Firestore\r\n      const userDoc = await getDoc(doc(db, 'users', user.uid));\r\n      if (userDoc.exists()) {\r\n        const userData = userDoc.data();\r\n        setUserRole(userData.role);\r\n        \r\n        if (!userData.active) {\r\n          await signOut(auth);\r\n          toast.error('Your account has been disabled. Please contact support.');\r\n          throw new Error('Account disabled');\r\n        }\r\n      }\r\n      \r\n      toast.success('Welcome back!');\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      toast.error(error.message || 'Failed to login');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = async () => {\r\n    try {\r\n      await signOut(auth);\r\n      setCurrentUser(null);\r\n      setUserRole(null);\r\n      toast.success('Logged out successfully');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      toast.error('Failed to logout');\r\n    }\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = () => {\r\n    return userRole === 'admin';\r\n  };\r\n\r\n  // Check if user is authenticated\r\n  const isAuthenticated = () => {\r\n    return !!currentUser;\r\n  };\r\n\r\n  // Update user profile\r\n  const updateUserProfile = async (data) => {\r\n    try {\r\n      if (currentUser) {\r\n        await updateProfile(currentUser, data);\r\n        \r\n        // Update Firestore document\r\n        await setDoc(doc(db, 'users', currentUser.uid), {\r\n          ...data,\r\n          updatedAt: new Date().toISOString()\r\n        }, { merge: true });\r\n        \r\n        toast.success('Profile updated successfully');\r\n      }\r\n    } catch (error) {\r\n      console.error('Profile update error:', error);\r\n      toast.error('Failed to update profile');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Get user role from Firestore\r\n  const getUserRole = async (uid) => {\r\n    try {\r\n      const userDoc = await getDoc(doc(db, 'users', uid));\r\n      if (userDoc.exists()) {\r\n        return userDoc.data().role;\r\n      }\r\n      return 'user'; // Default role\r\n    } catch (error) {\r\n      console.error('Get user role error:', error);\r\n      return 'user';\r\n    }\r\n  };\r\n\r\n  // Listen for authentication state changes\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      if (user) {\r\n        setCurrentUser(user);\r\n        // Get user role from Firestore\r\n        const role = await getUserRole(user.uid);\r\n        setUserRole(role);\r\n      } else {\r\n        setCurrentUser(null);\r\n        setUserRole(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    userRole,\r\n    signup,\r\n    login,\r\n    logout,\r\n    isAdmin,\r\n    isAuthenticated,\r\n    updateUserProfile,\r\n    getUserRole\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Law\\\\law-firm-app\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { db } from '../services/localStorage';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Register new user\n  const signup = async (email, password, displayName, role = 'user') => {\n    try {\n      // Check if user already exists\n      const existingUsers = db.where('users', 'email', '==', email);\n      if (existingUsers.length > 0) {\n        throw new Error('User with this email already exists');\n      }\n\n      // Create new user\n      const userData = {\n        uid: db.generateId(),\n        email: email,\n        displayName: displayName,\n        role: role,\n        active: true,\n        passwordHash: db.hashPassword(password)\n      };\n      const user = db.create('users', userData);\n\n      // Set current user (remove password hash from user object)\n      const {\n        passwordHash,\n        ...userWithoutPassword\n      } = user;\n      setCurrentUser(userWithoutPassword);\n      setUserRole(role);\n      db.setCurrentUser(userWithoutPassword);\n      toast.success('Account created successfully!');\n      return userWithoutPassword;\n    } catch (error) {\n      console.error('Signup error:', error);\n      toast.error(error.message || 'Failed to create account');\n      throw error;\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      // Find user by email\n      const users = db.where('users', 'email', '==', email);\n      if (users.length === 0) {\n        throw new Error('No user found with this email');\n      }\n      const user = users[0];\n\n      // Verify password\n      if (!db.verifyPassword(password, user.passwordHash)) {\n        throw new Error('Invalid password');\n      }\n\n      // Check if user is active\n      if (!user.active) {\n        throw new Error('Your account has been disabled. Please contact support.');\n      }\n\n      // Set current user (remove password hash)\n      const {\n        passwordHash,\n        ...userWithoutPassword\n      } = user;\n      setCurrentUser(userWithoutPassword);\n      setUserRole(user.role);\n      db.setCurrentUser(userWithoutPassword);\n      toast.success('Welcome back!');\n      return userWithoutPassword;\n    } catch (error) {\n      console.error('Login error:', error);\n      toast.error(error.message || 'Failed to login');\n      throw error;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      setCurrentUser(null);\n      setUserRole(null);\n      db.clearCurrentUser();\n      toast.success('Logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n      toast.error('Failed to logout');\n    }\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return userRole === 'admin';\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!currentUser;\n  };\n\n  // Update user profile\n  const updateUserProfile = async data => {\n    try {\n      if (currentUser) {\n        const updatedUser = db.update('users', currentUser.id, data);\n        if (updatedUser) {\n          const {\n            passwordHash,\n            ...userWithoutPassword\n          } = updatedUser;\n          setCurrentUser(userWithoutPassword);\n          db.setCurrentUser(userWithoutPassword);\n          toast.success('Profile updated successfully');\n        }\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      toast.error('Failed to update profile');\n      throw error;\n    }\n  };\n\n  // Get user role\n  const getUserRole = uid => {\n    const user = db.getById('users', uid);\n    return user ? user.role : 'user';\n  };\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initAuth = () => {\n      const savedUser = db.getCurrentUser();\n      if (savedUser) {\n        // Verify user still exists and is active\n        const user = db.getById('users', savedUser.id);\n        if (user && user.active) {\n          setCurrentUser(savedUser);\n          setUserRole(savedUser.role);\n        } else {\n          // User no longer exists or is inactive\n          db.clearCurrentUser();\n        }\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, []);\n  const value = {\n    currentUser,\n    userRole,\n    signup,\n    login,\n    logout,\n    isAdmin,\n    isAuthenticated,\n    updateUserProfile,\n    getUserRole\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"oJcdYGl4IB/GVvCCnTftfffWqnQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","db","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","userRole","setUserRole","loading","setLoading","signup","email","password","displayName","role","existingUsers","where","length","userData","uid","generateId","active","passwordHash","hashPassword","user","create","userWithoutPassword","success","error","console","message","login","users","verifyPassword","logout","clearCurrentUser","isAdmin","isAuthenticated","updateUserProfile","data","updatedUser","update","id","getUserRole","getById","initAuth","savedUser","getCurrentUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Law/law-firm-app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { db } from '../services/localStorage';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Register new user\r\n  const signup = async (email, password, displayName, role = 'user') => {\r\n    try {\r\n      // Check if user already exists\r\n      const existingUsers = db.where('users', 'email', '==', email);\r\n      if (existingUsers.length > 0) {\r\n        throw new Error('User with this email already exists');\r\n      }\r\n\r\n      // Create new user\r\n      const userData = {\r\n        uid: db.generateId(),\r\n        email: email,\r\n        displayName: displayName,\r\n        role: role,\r\n        active: true,\r\n        passwordHash: db.hashPassword(password)\r\n      };\r\n\r\n      const user = db.create('users', userData);\r\n      \r\n      // Set current user (remove password hash from user object)\r\n      const { passwordHash, ...userWithoutPassword } = user;\r\n      setCurrentUser(userWithoutPassword);\r\n      setUserRole(role);\r\n      db.setCurrentUser(userWithoutPassword);\r\n\r\n      toast.success('Account created successfully!');\r\n      return userWithoutPassword;\r\n    } catch (error) {\r\n      console.error('Signup error:', error);\r\n      toast.error(error.message || 'Failed to create account');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Login user\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Find user by email\r\n      const users = db.where('users', 'email', '==', email);\r\n      if (users.length === 0) {\r\n        throw new Error('No user found with this email');\r\n      }\r\n\r\n      const user = users[0];\r\n      \r\n      // Verify password\r\n      if (!db.verifyPassword(password, user.passwordHash)) {\r\n        throw new Error('Invalid password');\r\n      }\r\n\r\n      // Check if user is active\r\n      if (!user.active) {\r\n        throw new Error('Your account has been disabled. Please contact support.');\r\n      }\r\n\r\n      // Set current user (remove password hash)\r\n      const { passwordHash, ...userWithoutPassword } = user;\r\n      setCurrentUser(userWithoutPassword);\r\n      setUserRole(user.role);\r\n      db.setCurrentUser(userWithoutPassword);\r\n      \r\n      toast.success('Welcome back!');\r\n      return userWithoutPassword;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      toast.error(error.message || 'Failed to login');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = async () => {\r\n    try {\r\n      setCurrentUser(null);\r\n      setUserRole(null);\r\n      db.clearCurrentUser();\r\n      toast.success('Logged out successfully');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      toast.error('Failed to logout');\r\n    }\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = () => {\r\n    return userRole === 'admin';\r\n  };\r\n\r\n  // Check if user is authenticated\r\n  const isAuthenticated = () => {\r\n    return !!currentUser;\r\n  };\r\n\r\n  // Update user profile\r\n  const updateUserProfile = async (data) => {\r\n    try {\r\n      if (currentUser) {\r\n        const updatedUser = db.update('users', currentUser.id, data);\r\n        \r\n        if (updatedUser) {\r\n          const { passwordHash, ...userWithoutPassword } = updatedUser;\r\n          setCurrentUser(userWithoutPassword);\r\n          db.setCurrentUser(userWithoutPassword);\r\n          toast.success('Profile updated successfully');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Profile update error:', error);\r\n      toast.error('Failed to update profile');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Get user role\r\n  const getUserRole = (uid) => {\r\n    const user = db.getById('users', uid);\r\n    return user ? user.role : 'user';\r\n  };\r\n\r\n  // Initialize auth state from localStorage\r\n  useEffect(() => {\r\n    const initAuth = () => {\r\n      const savedUser = db.getCurrentUser();\r\n      if (savedUser) {\r\n        // Verify user still exists and is active\r\n        const user = db.getById('users', savedUser.id);\r\n        if (user && user.active) {\r\n          setCurrentUser(savedUser);\r\n          setUserRole(savedUser.role);\r\n        } else {\r\n          // User no longer exists or is inactive\r\n          db.clearCurrentUser();\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    initAuth();\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    userRole,\r\n    signup,\r\n    login,\r\n    logout,\r\n    isAdmin,\r\n    isAuthenticated,\r\n    updateUserProfile,\r\n    getUserRole\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { collection, doc, getDocs, getDoc, updateDoc, deleteDoc, query, where, orderBy } from 'firebase/firestore';\nimport { db } from './firebase';\nimport toast from 'react-hot-toast';\nclass AuthService {\n  constructor() {\n    this.usersCollection = collection(db, 'users');\n  }\n\n  // Get all users (admin only)\n  async getAllUsers() {\n    try {\n      const q = query(this.usersCollection, orderBy('createdAt', 'desc'));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      toast.error('Failed to fetch users');\n      throw error;\n    }\n  }\n\n  // Get user by ID\n  async getUserById(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (userDoc.exists()) {\n        return {\n          id: userDoc.id,\n          ...userDoc.data()\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  }\n\n  // Update user status (activate/deactivate)\n  async updateUserStatus(userId, active) {\n    try {\n      await updateDoc(doc(db, 'users', userId), {\n        active: active,\n        updatedAt: new Date().toISOString()\n      });\n      toast.success(`User ${active ? 'activated' : 'deactivated'} successfully`);\n      return true;\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      toast.error('Failed to update user status');\n      throw error;\n    }\n  }\n\n  // Update user role\n  async updateUserRole(userId, role) {\n    try {\n      await updateDoc(doc(db, 'users', userId), {\n        role: role,\n        updatedAt: new Date().toISOString()\n      });\n      toast.success('User role updated successfully');\n      return true;\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      toast.error('Failed to update user role');\n      throw error;\n    }\n  }\n\n  // Delete user (admin only)\n  async deleteUser(userId) {\n    try {\n      await deleteDoc(doc(db, 'users', userId));\n      toast.success('User deleted successfully');\n      return true;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      toast.error('Failed to delete user');\n      throw error;\n    }\n  }\n\n  // Get users by role\n  async getUsersByRole(role) {\n    try {\n      const q = query(this.usersCollection, where('role', '==', role), orderBy('createdAt', 'desc'));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error fetching users by role:', error);\n      throw error;\n    }\n  }\n\n  // Search users by name or email\n  async searchUsers(searchTerm) {\n    try {\n      const allUsers = await this.getAllUsers();\n      return allUsers.filter(user => {\n        var _user$displayName, _user$email;\n        return ((_user$displayName = user.displayName) === null || _user$displayName === void 0 ? void 0 : _user$displayName.toLowerCase().includes(searchTerm.toLowerCase())) || ((_user$email = user.email) === null || _user$email === void 0 ? void 0 : _user$email.toLowerCase().includes(searchTerm.toLowerCase()));\n      });\n    } catch (error) {\n      console.error('Error searching users:', error);\n      throw error;\n    }\n  }\n\n  // Get user statistics\n  async getUserStats() {\n    try {\n      const users = await this.getAllUsers();\n      const stats = {\n        total: users.length,\n        active: users.filter(user => user.active).length,\n        inactive: users.filter(user => !user.active).length,\n        admins: users.filter(user => user.role === 'admin').length,\n        clients: users.filter(user => user.role === 'user').length\n      };\n      return stats;\n    } catch (error) {\n      console.error('Error fetching user stats:', error);\n      throw error;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["collection","doc","getDocs","getDoc","updateDoc","deleteDoc","query","where","orderBy","db","toast","AuthService","constructor","usersCollection","getAllUsers","q","snapshot","docs","map","id","data","error","console","getUserById","userId","userDoc","exists","updateUserStatus","active","updatedAt","Date","toISOString","success","updateUserRole","role","deleteUser","getUsersByRole","searchUsers","searchTerm","allUsers","filter","user","_user$displayName","_user$email","displayName","toLowerCase","includes","email","getUserStats","users","stats","total","length","inactive","admins","clients"],"sources":["D:/Law/law-firm-app/src/services/authService.js"],"sourcesContent":["import { \r\n  collection, \r\n  doc, \r\n  getDocs, \r\n  getDoc, \r\n  updateDoc, \r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy \r\n} from 'firebase/firestore';\r\nimport { db } from './firebase';\r\nimport toast from 'react-hot-toast';\r\n\r\nclass AuthService {\r\n  constructor() {\r\n    this.usersCollection = collection(db, 'users');\r\n  }\r\n\r\n  // Get all users (admin only)\r\n  async getAllUsers() {\r\n    try {\r\n      const q = query(this.usersCollection, orderBy('createdAt', 'desc'));\r\n      const snapshot = await getDocs(q);\r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n      toast.error('Failed to fetch users');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user by ID\r\n  async getUserById(userId) {\r\n    try {\r\n      const userDoc = await getDoc(doc(db, 'users', userId));\r\n      if (userDoc.exists()) {\r\n        return {\r\n          id: userDoc.id,\r\n          ...userDoc.data()\r\n        };\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update user status (activate/deactivate)\r\n  async updateUserStatus(userId, active) {\r\n    try {\r\n      await updateDoc(doc(db, 'users', userId), {\r\n        active: active,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      \r\n      toast.success(`User ${active ? 'activated' : 'deactivated'} successfully`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating user status:', error);\r\n      toast.error('Failed to update user status');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update user role\r\n  async updateUserRole(userId, role) {\r\n    try {\r\n      await updateDoc(doc(db, 'users', userId), {\r\n        role: role,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n      \r\n      toast.success('User role updated successfully');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating user role:', error);\r\n      toast.error('Failed to update user role');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete user (admin only)\r\n  async deleteUser(userId) {\r\n    try {\r\n      await deleteDoc(doc(db, 'users', userId));\r\n      toast.success('User deleted successfully');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n      toast.error('Failed to delete user');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get users by role\r\n  async getUsersByRole(role) {\r\n    try {\r\n      const q = query(\r\n        this.usersCollection, \r\n        where('role', '==', role),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      const snapshot = await getDocs(q);\r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching users by role:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search users by name or email\r\n  async searchUsers(searchTerm) {\r\n    try {\r\n      const allUsers = await this.getAllUsers();\r\n      return allUsers.filter(user => \r\n        user.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        user.email?.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user statistics\r\n  async getUserStats() {\r\n    try {\r\n      const users = await this.getAllUsers();\r\n      \r\n      const stats = {\r\n        total: users.length,\r\n        active: users.filter(user => user.active).length,\r\n        inactive: users.filter(user => !user.active).length,\r\n        admins: users.filter(user => user.role === 'admin').length,\r\n        clients: users.filter(user => user.role === 'user').length\r\n      };\r\n      \r\n      return stats;\r\n    } catch (error) {\r\n      console.error('Error fetching user stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
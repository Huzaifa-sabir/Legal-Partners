{"ast":null,"code":"import { db } from './localStorage';\nimport toast from 'react-hot-toast';\nclass PoliciesService {\n  constructor() {\n    this.policiesCollection = 'policies';\n  }\n\n  // Create new policy (admin only)\n  async createPolicy(policyData) {\n    try {\n      const newPolicy = {\n        ...policyData,\n        active: true\n      };\n      const policy = db.create(this.policiesCollection, newPolicy);\n      toast.success('Policy created successfully');\n      return policy;\n    } catch (error) {\n      console.error('Error creating policy:', error);\n      toast.error('Failed to create policy');\n      throw error;\n    }\n  }\n\n  // Get all policies\n  async getAllPolicies() {\n    try {\n      const policies = db.getAll(this.policiesCollection);\n      return policies.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    } catch (error) {\n      console.error('Error fetching policies:', error);\n      toast.error('Failed to fetch policies');\n      throw error;\n    }\n  }\n\n  // Get active policies only\n  async getActivePolicies() {\n    try {\n      const policies = db.where(this.policiesCollection, 'active', '==', true);\n      return policies.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    } catch (error) {\n      console.error('Error fetching active policies:', error);\n      throw error;\n    }\n  }\n\n  // Get policy by ID\n  async getPolicyById(policyId) {\n    try {\n      const policy = db.getById(this.policiesCollection, policyId);\n      return policy;\n    } catch (error) {\n      console.error('Error fetching policy:', error);\n      throw error;\n    }\n  }\n\n  // Update policy (admin only)\n  async updatePolicy(policyId, updateData) {\n    try {\n      const updatedPolicy = db.update(this.policiesCollection, policyId, updateData);\n      if (updatedPolicy) {\n        toast.success('Policy updated successfully');\n        return true;\n      }\n      throw new Error('Policy not found');\n    } catch (error) {\n      console.error('Error updating policy:', error);\n      toast.error('Failed to update policy');\n      throw error;\n    }\n  }\n\n  // Delete policy (admin only)\n  async deletePolicy(policyId) {\n    try {\n      const success = db.delete(this.policiesCollection, policyId);\n      if (success) {\n        toast.success('Policy deleted successfully');\n        return true;\n      }\n      throw new Error('Failed to delete policy');\n    } catch (error) {\n      console.error('Error deleting policy:', error);\n      toast.error('Failed to delete policy');\n      throw error;\n    }\n  }\n\n  // Toggle policy status (activate/deactivate)\n  async togglePolicyStatus(policyId, active) {\n    try {\n      const updatedPolicy = db.update(this.policiesCollection, policyId, {\n        active\n      });\n      if (updatedPolicy) {\n        toast.success(`Policy ${active ? 'activated' : 'deactivated'} successfully`);\n        return true;\n      }\n      throw new Error('Policy not found');\n    } catch (error) {\n      console.error('Error toggling policy status:', error);\n      toast.error('Failed to update policy status');\n      throw error;\n    }\n  }\n\n  // Search policies\n  async searchPolicies(searchTerm) {\n    try {\n      const allPolicies = await this.getAllPolicies();\n      return allPolicies.filter(policy => {\n        var _policy$title, _policy$description, _policy$category;\n        return ((_policy$title = policy.title) === null || _policy$title === void 0 ? void 0 : _policy$title.toLowerCase().includes(searchTerm.toLowerCase())) || ((_policy$description = policy.description) === null || _policy$description === void 0 ? void 0 : _policy$description.toLowerCase().includes(searchTerm.toLowerCase())) || ((_policy$category = policy.category) === null || _policy$category === void 0 ? void 0 : _policy$category.toLowerCase().includes(searchTerm.toLowerCase()));\n      });\n    } catch (error) {\n      console.error('Error searching policies:', error);\n      throw error;\n    }\n  }\n\n  // Get policies by category\n  async getPoliciesByCategory(category) {\n    try {\n      const policies = db.where(this.policiesCollection, 'category', '==', category);\n      const activePolicies = policies.filter(policy => policy.active);\n      return activePolicies.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    } catch (error) {\n      console.error('Error fetching policies by category:', error);\n      throw error;\n    }\n  }\n\n  // Get recent policies\n  async getRecentPolicies(limitCount = 5) {\n    try {\n      const policies = db.where(this.policiesCollection, 'active', '==', true);\n      const sortedPolicies = policies.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      return sortedPolicies.slice(0, limitCount);\n    } catch (error) {\n      console.error('Error fetching recent policies:', error);\n      throw error;\n    }\n  }\n\n  // Get policy statistics\n  async getPolicyStats() {\n    try {\n      const policies = await this.getAllPolicies();\n      const stats = {\n        total: policies.length,\n        active: policies.filter(policy => policy.active).length,\n        inactive: policies.filter(policy => !policy.active).length,\n        categories: [...new Set(policies.map(policy => policy.category))].length\n      };\n      return stats;\n    } catch (error) {\n      console.error('Error fetching policy stats:', error);\n      throw error;\n    }\n  }\n\n  // Get policies grouped by category\n  async getPoliciesGroupedByCategory() {\n    try {\n      const policies = await this.getActivePolicies();\n      const grouped = policies.reduce((acc, policy) => {\n        const category = policy.category || 'Uncategorized';\n        if (!acc[category]) {\n          acc[category] = [];\n        }\n        acc[category].push(policy);\n        return acc;\n      }, {});\n      return grouped;\n    } catch (error) {\n      console.error('Error grouping policies by category:', error);\n      throw error;\n    }\n  }\n}\nexport default new PoliciesService();","map":{"version":3,"names":["db","toast","PoliciesService","constructor","policiesCollection","createPolicy","policyData","newPolicy","active","policy","create","success","error","console","getAllPolicies","policies","getAll","sort","a","b","Date","createdAt","getActivePolicies","where","getPolicyById","policyId","getById","updatePolicy","updateData","updatedPolicy","update","Error","deletePolicy","delete","togglePolicyStatus","searchPolicies","searchTerm","allPolicies","filter","_policy$title","_policy$description","_policy$category","title","toLowerCase","includes","description","category","getPoliciesByCategory","activePolicies","getRecentPolicies","limitCount","sortedPolicies","slice","getPolicyStats","stats","total","length","inactive","categories","Set","map","getPoliciesGroupedByCategory","grouped","reduce","acc","push"],"sources":["D:/Law/law-firm-app/src/services/policiesService.js"],"sourcesContent":["import { db } from './localStorage';\r\nimport toast from 'react-hot-toast';\r\n\r\nclass PoliciesService {\r\n  constructor() {\r\n    this.policiesCollection = 'policies';\r\n  }\r\n\r\n  // Create new policy (admin only)\r\n  async createPolicy(policyData) {\r\n    try {\r\n      const newPolicy = {\r\n        ...policyData,\r\n        active: true\r\n      };\r\n\r\n      const policy = db.create(this.policiesCollection, newPolicy);\r\n      toast.success('Policy created successfully');\r\n      \r\n      return policy;\r\n    } catch (error) {\r\n      console.error('Error creating policy:', error);\r\n      toast.error('Failed to create policy');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all policies\r\n  async getAllPolicies() {\r\n    try {\r\n      const policies = db.getAll(this.policiesCollection);\r\n      return policies.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n    } catch (error) {\r\n      console.error('Error fetching policies:', error);\r\n      toast.error('Failed to fetch policies');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get active policies only\r\n  async getActivePolicies() {\r\n    try {\r\n      const policies = db.where(this.policiesCollection, 'active', '==', true);\r\n      return policies.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n    } catch (error) {\r\n      console.error('Error fetching active policies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get policy by ID\r\n  async getPolicyById(policyId) {\r\n    try {\r\n      const policy = db.getById(this.policiesCollection, policyId);\r\n      return policy;\r\n    } catch (error) {\r\n      console.error('Error fetching policy:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update policy (admin only)\r\n  async updatePolicy(policyId, updateData) {\r\n    try {\r\n      const updatedPolicy = db.update(this.policiesCollection, policyId, updateData);\r\n      \r\n      if (updatedPolicy) {\r\n        toast.success('Policy updated successfully');\r\n        return true;\r\n      }\r\n      throw new Error('Policy not found');\r\n    } catch (error) {\r\n      console.error('Error updating policy:', error);\r\n      toast.error('Failed to update policy');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete policy (admin only)\r\n  async deletePolicy(policyId) {\r\n    try {\r\n      const success = db.delete(this.policiesCollection, policyId);\r\n      if (success) {\r\n        toast.success('Policy deleted successfully');\r\n        return true;\r\n      }\r\n      throw new Error('Failed to delete policy');\r\n    } catch (error) {\r\n      console.error('Error deleting policy:', error);\r\n      toast.error('Failed to delete policy');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Toggle policy status (activate/deactivate)\r\n  async togglePolicyStatus(policyId, active) {\r\n    try {\r\n      const updatedPolicy = db.update(this.policiesCollection, policyId, { active });\r\n      \r\n      if (updatedPolicy) {\r\n        toast.success(`Policy ${active ? 'activated' : 'deactivated'} successfully`);\r\n        return true;\r\n      }\r\n      throw new Error('Policy not found');\r\n    } catch (error) {\r\n      console.error('Error toggling policy status:', error);\r\n      toast.error('Failed to update policy status');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search policies\r\n  async searchPolicies(searchTerm) {\r\n    try {\r\n      const allPolicies = await this.getAllPolicies();\r\n      \r\n      return allPolicies.filter(policy => \r\n        policy.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        policy.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        policy.category?.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    } catch (error) {\r\n      console.error('Error searching policies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get policies by category\r\n  async getPoliciesByCategory(category) {\r\n    try {\r\n      const policies = db.where(this.policiesCollection, 'category', '==', category);\r\n      const activePolicies = policies.filter(policy => policy.active);\r\n      return activePolicies.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n    } catch (error) {\r\n      console.error('Error fetching policies by category:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get recent policies\r\n  async getRecentPolicies(limitCount = 5) {\r\n    try {\r\n      const policies = db.where(this.policiesCollection, 'active', '==', true);\r\n      const sortedPolicies = policies.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n      return sortedPolicies.slice(0, limitCount);\r\n    } catch (error) {\r\n      console.error('Error fetching recent policies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get policy statistics\r\n  async getPolicyStats() {\r\n    try {\r\n      const policies = await this.getAllPolicies();\r\n      \r\n      const stats = {\r\n        total: policies.length,\r\n        active: policies.filter(policy => policy.active).length,\r\n        inactive: policies.filter(policy => !policy.active).length,\r\n        categories: [...new Set(policies.map(policy => policy.category))].length\r\n      };\r\n      \r\n      return stats;\r\n    } catch (error) {\r\n      console.error('Error fetching policy stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get policies grouped by category\r\n  async getPoliciesGroupedByCategory() {\r\n    try {\r\n      const policies = await this.getActivePolicies();\r\n      \r\n      const grouped = policies.reduce((acc, policy) => {\r\n        const category = policy.category || 'Uncategorized';\r\n        if (!acc[category]) {\r\n          acc[category] = [];\r\n        }\r\n        acc[category].push(policy);\r\n        return acc;\r\n      }, {});\r\n      \r\n      return grouped;\r\n    } catch (error) {\r\n      console.error('Error grouping policies by category:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new PoliciesService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
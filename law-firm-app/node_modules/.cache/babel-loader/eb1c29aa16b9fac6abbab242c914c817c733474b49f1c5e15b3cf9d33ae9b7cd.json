{"ast":null,"code":"import { db } from './localStorage';\nimport toast from 'react-hot-toast';\nclass AuthService {\n  constructor() {\n    this.usersCollection = 'users';\n  }\n\n  // Get all users (admin only)\n  async getAllUsers() {\n    try {\n      const users = db.getAll(this.usersCollection);\n      // Remove password hashes from response\n      return users.map(user => {\n        const {\n          passwordHash,\n          ...userWithoutPassword\n        } = user;\n        return userWithoutPassword;\n      }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      toast.error('Failed to fetch users');\n      throw error;\n    }\n  }\n\n  // Get user by ID\n  async getUserById(userId) {\n    try {\n      const user = db.getById(this.usersCollection, userId);\n      if (user) {\n        const {\n          passwordHash,\n          ...userWithoutPassword\n        } = user;\n        return userWithoutPassword;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  }\n\n  // Update user status (activate/deactivate)\n  async updateUserStatus(userId, active) {\n    try {\n      const updatedUser = db.update(this.usersCollection, userId, {\n        active\n      });\n      if (updatedUser) {\n        toast.success(`User ${active ? 'activated' : 'deactivated'} successfully`);\n        return true;\n      }\n      throw new Error('User not found');\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      toast.error('Failed to update user status');\n      throw error;\n    }\n  }\n\n  // Update user role\n  async updateUserRole(userId, role) {\n    try {\n      const updatedUser = db.update(this.usersCollection, userId, {\n        role\n      });\n      if (updatedUser) {\n        toast.success('User role updated successfully');\n        return true;\n      }\n      throw new Error('User not found');\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      toast.error('Failed to update user role');\n      throw error;\n    }\n  }\n\n  // Delete user (admin only)\n  async deleteUser(userId) {\n    try {\n      const success = db.delete(this.usersCollection, userId);\n      if (success) {\n        toast.success('User deleted successfully');\n        return true;\n      }\n      throw new Error('Failed to delete user');\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      toast.error('Failed to delete user');\n      throw error;\n    }\n  }\n\n  // Get users by role\n  async getUsersByRole(role) {\n    try {\n      const users = db.where(this.usersCollection, 'role', '==', role);\n      return users.map(user => {\n        const {\n          passwordHash,\n          ...userWithoutPassword\n        } = user;\n        return userWithoutPassword;\n      }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    } catch (error) {\n      console.error('Error fetching users by role:', error);\n      throw error;\n    }\n  }\n\n  // Search users by name or email\n  async searchUsers(searchTerm) {\n    try {\n      const allUsers = await this.getAllUsers();\n      return allUsers.filter(user => {\n        var _user$displayName, _user$email;\n        return ((_user$displayName = user.displayName) === null || _user$displayName === void 0 ? void 0 : _user$displayName.toLowerCase().includes(searchTerm.toLowerCase())) || ((_user$email = user.email) === null || _user$email === void 0 ? void 0 : _user$email.toLowerCase().includes(searchTerm.toLowerCase()));\n      });\n    } catch (error) {\n      console.error('Error searching users:', error);\n      throw error;\n    }\n  }\n\n  // Get user statistics\n  async getUserStats() {\n    try {\n      const users = await this.getAllUsers();\n      const stats = {\n        total: users.length,\n        active: users.filter(user => user.active).length,\n        inactive: users.filter(user => !user.active).length,\n        admins: users.filter(user => user.role === 'admin').length,\n        clients: users.filter(user => user.role === 'user').length\n      };\n      return stats;\n    } catch (error) {\n      console.error('Error fetching user stats:', error);\n      throw error;\n    }\n  }\n\n  // Change user password (for demo purposes)\n  async changePassword(userId, newPassword) {\n    try {\n      const passwordHash = db.hashPassword(newPassword);\n      const updatedUser = db.update(this.usersCollection, userId, {\n        passwordHash\n      });\n      if (updatedUser) {\n        toast.success('Password updated successfully');\n        return true;\n      }\n      throw new Error('User not found');\n    } catch (error) {\n      console.error('Error changing password:', error);\n      toast.error('Failed to change password');\n      throw error;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["db","toast","AuthService","constructor","usersCollection","getAllUsers","users","getAll","map","user","passwordHash","userWithoutPassword","sort","a","b","Date","createdAt","error","console","getUserById","userId","getById","updateUserStatus","active","updatedUser","update","success","Error","updateUserRole","role","deleteUser","delete","getUsersByRole","where","searchUsers","searchTerm","allUsers","filter","_user$displayName","_user$email","displayName","toLowerCase","includes","email","getUserStats","stats","total","length","inactive","admins","clients","changePassword","newPassword","hashPassword"],"sources":["D:/Law/law-firm-app/src/services/authService.js"],"sourcesContent":["import { db } from './localStorage';\r\nimport toast from 'react-hot-toast';\r\n\r\nclass AuthService {\r\n  constructor() {\r\n    this.usersCollection = 'users';\r\n  }\r\n\r\n  // Get all users (admin only)\r\n  async getAllUsers() {\r\n    try {\r\n      const users = db.getAll(this.usersCollection);\r\n      // Remove password hashes from response\r\n      return users.map(user => {\r\n        const { passwordHash, ...userWithoutPassword } = user;\r\n        return userWithoutPassword;\r\n      }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n      toast.error('Failed to fetch users');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user by ID\r\n  async getUserById(userId) {\r\n    try {\r\n      const user = db.getById(this.usersCollection, userId);\r\n      if (user) {\r\n        const { passwordHash, ...userWithoutPassword } = user;\r\n        return userWithoutPassword;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update user status (activate/deactivate)\r\n  async updateUserStatus(userId, active) {\r\n    try {\r\n      const updatedUser = db.update(this.usersCollection, userId, { active });\r\n      \r\n      if (updatedUser) {\r\n        toast.success(`User ${active ? 'activated' : 'deactivated'} successfully`);\r\n        return true;\r\n      }\r\n      throw new Error('User not found');\r\n    } catch (error) {\r\n      console.error('Error updating user status:', error);\r\n      toast.error('Failed to update user status');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update user role\r\n  async updateUserRole(userId, role) {\r\n    try {\r\n      const updatedUser = db.update(this.usersCollection, userId, { role });\r\n      \r\n      if (updatedUser) {\r\n        toast.success('User role updated successfully');\r\n        return true;\r\n      }\r\n      throw new Error('User not found');\r\n    } catch (error) {\r\n      console.error('Error updating user role:', error);\r\n      toast.error('Failed to update user role');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete user (admin only)\r\n  async deleteUser(userId) {\r\n    try {\r\n      const success = db.delete(this.usersCollection, userId);\r\n      if (success) {\r\n        toast.success('User deleted successfully');\r\n        return true;\r\n      }\r\n      throw new Error('Failed to delete user');\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n      toast.error('Failed to delete user');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get users by role\r\n  async getUsersByRole(role) {\r\n    try {\r\n      const users = db.where(this.usersCollection, 'role', '==', role);\r\n      return users.map(user => {\r\n        const { passwordHash, ...userWithoutPassword } = user;\r\n        return userWithoutPassword;\r\n      }).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n    } catch (error) {\r\n      console.error('Error fetching users by role:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search users by name or email\r\n  async searchUsers(searchTerm) {\r\n    try {\r\n      const allUsers = await this.getAllUsers();\r\n      return allUsers.filter(user => \r\n        user.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        user.email?.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user statistics\r\n  async getUserStats() {\r\n    try {\r\n      const users = await this.getAllUsers();\r\n      \r\n      const stats = {\r\n        total: users.length,\r\n        active: users.filter(user => user.active).length,\r\n        inactive: users.filter(user => !user.active).length,\r\n        admins: users.filter(user => user.role === 'admin').length,\r\n        clients: users.filter(user => user.role === 'user').length\r\n      };\r\n      \r\n      return stats;\r\n    } catch (error) {\r\n      console.error('Error fetching user stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Change user password (for demo purposes)\r\n  async changePassword(userId, newPassword) {\r\n    try {\r\n      const passwordHash = db.hashPassword(newPassword);\r\n      const updatedUser = db.update(this.usersCollection, userId, { passwordHash });\r\n      \r\n      if (updatedUser) {\r\n        toast.success('Password updated successfully');\r\n        return true;\r\n      }\r\n      throw new Error('User not found');\r\n    } catch (error) {\r\n      console.error('Error changing password:', error);\r\n      toast.error('Failed to change password');\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}